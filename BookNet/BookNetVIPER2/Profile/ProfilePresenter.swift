//
//  ProfilePresenter.swift
//  Project
//
//  Created by Abdulkadir Oruç on 3.08.2024.
//
//  This file was generated by the 🐍 VIPER generator
//

import FirebaseAuth
import UIKit

final class ProfilePresenter {
    
    // MARK: - Private properties -

    private unowned let view: ProfileViewInterface
    private let interactor: ProfileInteractorInputInterface
    private let wireframe: ProfileWireframeInterface

    // MARK: - Lifecycle -

    init(view: ProfileViewInterface, interactor: ProfileInteractorInputInterface, wireframe: ProfileWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
    
    var uid: String?
    var user: UserModel?
    var selectedButton: UIButton?
    var currentCellType: String = Constants.TabButtons.posts
    
    var posts: [PostModel] = []
    var books: [BookModel] = []
}

// MARK: - Extensions -

extension ProfilePresenter: ProfilePresenterInterface {

    func viewWillAppear() {
        view.showLoading()
        
        if let uid = uid{
            interactor.fetchUserProfile(for: uid)
        }else{
            interactor.fetchUserProfile(for: Auth.auth().currentUser?.uid)
        }
    }
    
    
    func tappedLogOutButton() {
        interactor.userLogOut()
    }
    
    func didSelectProfileImage(image: UIImage?) {
        view.showLoading()
        if let image = image, let user = user{
            interactor.uploadProfileImage(user: user, image: image)
        }

    }
    
    func tappedTabButtons(_ sender: UIButton) {
        
        if sender == selectedButton {
            return
        }
        
        selectedButton = sender
        
        view.updateTabButtonsAppearance(sender: sender)
        
        if sender.titleLabel?.text == Constants.TabButtons.library {
            
            interactor.fetchUserBooks(for: self.user?.uid)
            
            currentCellType = Constants.TabButtons.library
            
            view.updateTabCellType(with: CustomBookCell.self, reuseIdentifier: CustomBookCell.identifier)

            
        }else if sender.titleLabel?.text == Constants.TabButtons.posts{
            
            interactor.fetchUserPosts(for: self.user)
            
            currentCellType = Constants.TabButtons.posts
            
            view.updateTabCellType(with: CustomPostCell.self, reuseIdentifier: CustomPostCell.identifier)
        }
    }
    
    //Collection View
    var numberOfItems: Int {
        return currentCellType == Constants.TabButtons.posts ? posts.count : books.count
    }

    func item(at indexPath: IndexPath) -> Any {
        return currentCellType == Constants.TabButtons.posts ? posts[indexPath.item] : books[indexPath.item]
    }

    func didSelectItem(at indexPath: IndexPath) {
        // Item selection handling
    }

    func sizeForItem(at indexPath: IndexPath) -> CGSize {
        return currentCellType == Constants.TabButtons.posts ? CGSize(width: UIScreen.main.bounds.width, height: 300) : CGSize(width: UIScreen.main.bounds.width, height: 130)
    }

    func configure(cell: UICollectionViewCell, at indexPath: IndexPath) {
        if currentCellType == Constants.TabButtons.posts, let cell = cell as? CustomPostCell {
            let post = posts[indexPath.item]
            cell.usernameLabel.text = post.user.username
            cell.profileImageView.loadImage(urlString: post.user.profileImageUrl)
            cell.bookImageView.loadImage(urlString: post.bookImageUrl)
            cell.bookLabel.text = post.bookName
            cell.postLabel.text = "\"\(post.postText)\""
            cell.dateLabel.text = post.creationDate.timeAgoDisplay()
            cell.postDescriptionLabel.text = post.autherName
            
        } else if currentCellType == Constants.TabButtons.library, let cell = cell as? CustomBookCell {
            
            let book = books[indexPath.item]
            cell.bookLabel.text = book.bookName
            cell.authorLabel.text = book.authorName
            cell.bookImageView.loadImage(urlString: book.imageUrl)
            cell.userId = book.userId
        }
    }
    
}

extension ProfilePresenter: ProfileInteractorOutputInterface {
    func didFetchUserBooks(_ books: [BookModel]) {
        self.books = []
        self.books = books
        view.reloadCollectionView()
    }
    

    func didFetchUserProfile(_ user: UserModel) {
        view.hideLoading()
        self.user = user
        view.showUser(with: user)
    }
    
    func didFetchUserPosts(_ posts: [PostModel]) {
        self.posts = []
        self.posts = posts
        view.reloadCollectionView()
    }
    
    func onError(_ message: String) {
        view.hideLoading()
        view.showError(message)
    }
    
    func didUserLogOut() {
        wireframe.navigateToLoginScreen()
    }
    
    func updateProfileImage(with imageUrl: String) {
        view.hideLoading()
        view.updateProfileImage(imageUrl)
    }
    
}

extension ProfilePresenter: CustomBookCellDelegate {
    func showAlert(from cell: CustomBookCell, message: String) {
        view.showAlert(message: message)
    }
}
